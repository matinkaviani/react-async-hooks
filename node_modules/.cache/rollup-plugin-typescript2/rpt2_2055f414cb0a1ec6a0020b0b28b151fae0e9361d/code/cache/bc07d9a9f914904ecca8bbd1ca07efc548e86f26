{"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { useCallback, useEffect, useReducer, useRef } from \"react\";\nfunction fetchReducer(state, action) {\n    switch (action.type) {\n        case \"INIT\":\n            return __assign(__assign({}, state), { loading: true, error: null });\n        case \"SUCCESS\":\n            return { data: action.payload, error: null, loading: false };\n        case \"FAILURE\":\n            return { data: null, error: action.payload, loading: false };\n        case \"RESET\":\n            return { data: null, error: null, loading: false };\n        default:\n            return state;\n    }\n}\nvar cache = new Map();\nexport function useAsync(asyncFunction, deps, cacheKeyGenerator) {\n    var _this = this;\n    if (deps === void 0) { deps = []; }\n    var _a = useReducer((fetchReducer), {\n        data: null,\n        error: null,\n        loading: false,\n    }), state = _a[0], dispatch = _a[1];\n    var abortControllerRef = useRef(null);\n    var refetch = useCallback(function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return __awaiter(_this, void 0, void 0, function () {\n            var cacheKey, cachedData, abortController, data, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        cacheKey = (cacheKeyGenerator === null || cacheKeyGenerator === void 0 ? void 0 : cacheKeyGenerator.apply(void 0, args)) || JSON.stringify(args);\n                        if (cache.has(cacheKey)) {\n                            cachedData = cache.get(cacheKey);\n                            dispatch({ type: \"SUCCESS\", payload: cachedData });\n                            return [2 /*return*/];\n                        }\n                        if (abortControllerRef.current) {\n                            abortControllerRef.current.abort();\n                        }\n                        abortController = new AbortController();\n                        abortControllerRef.current = abortController;\n                        dispatch({ type: \"INIT\" });\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, asyncFunction.apply(void 0, args)];\n                    case 2:\n                        data = _a.sent();\n                        cache.set(cacheKey, data);\n                        dispatch({ type: \"SUCCESS\", payload: data });\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_1 = _a.sent();\n                        if (error_1.name !== \"AbortError\") {\n                            dispatch({ type: \"FAILURE\", payload: error_1 });\n                        }\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    }, [asyncFunction, cacheKeyGenerator]);\n    var reset = useCallback(function () {\n        dispatch({ type: \"RESET\" });\n    }, []);\n    useEffect(function () {\n        refetch();\n        return function () {\n            if (abortControllerRef.current) {\n                abortControllerRef.current.abort();\n            }\n        };\n    }, deps);\n    return __assign(__assign({}, state), { refetch: refetch, reset: reset });\n}\n","references":["/Users/matin/node_modules/@types/react/index.d.ts"],"dts":{"name":"/Users/matin/Desktop/Code Mode/react-async-hooks/dist/types/hooks/useAsync.d.ts","writeByteOrderMark":false,"text":"export type AsyncState<T> = {\n    data: T | null;\n    error: Error | null;\n    loading: boolean;\n};\nexport declare function useAsync<T>(asyncFunction: (...args: any[]) => Promise<T>, deps?: any[], cacheKeyGenerator?: (...args: any[]) => string): {\n    refetch: (...args: any[]) => Promise<void>;\n    reset: () => void;\n    data: T | null;\n    error: Error | null;\n    loading: boolean;\n};\n"}}

{"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { buildQueryParams } from \"../utils/buildQueryParams\";\nimport { useAsync } from \"./useAsync\";\nexport function useFetch(url, options, queryParams) {\n    var _this = this;\n    var stableSerialize = function (obj) { return (obj ? JSON.stringify(obj) : null); };\n    var fetcher = function () { return __awaiter(_this, void 0, void 0, function () {\n        var query, fullUrl, response;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    query = buildQueryParams(queryParams);\n                    fullUrl = \"\".concat(url).concat(query);\n                    return [4 /*yield*/, fetch(fullUrl, __assign(__assign({}, options), { headers: __assign({}, ((options === null || options === void 0 ? void 0 : options.headers) || {})) }))];\n                case 1:\n                    response = _a.sent();\n                    if (!response.ok) {\n                        throw new Error(\"HTTP Error: \".concat(response.status));\n                    }\n                    return [2 /*return*/, response.json()];\n            }\n        });\n    }); };\n    return useAsync(fetcher, [url, stableSerialize(queryParams), stableSerialize(options)], function () { return \"\".concat(url).concat(buildQueryParams(queryParams)); });\n}\n","references":["/Users/matin/Desktop/Code Mode/react-async-hooks/src/utils/buildQueryParams.ts","/Users/matin/Desktop/Code Mode/react-async-hooks/src/hooks/useAsync.ts"],"dts":{"name":"/Users/matin/Desktop/Code Mode/react-async-hooks/dist/types/hooks/useFetch.d.ts","writeByteOrderMark":false,"text":"export declare function useFetch<T>(url: string, options?: RequestInit, queryParams?: Record<string, string>): {\n    refetch: (...args: any[]) => Promise<void>;\n    reset: () => void;\n    data: T | null;\n    error: Error | null;\n    loading: boolean;\n};\n"}}
